{"remainingRequest":"C:\\Users\\Admin\\source\\repos\\MathPlot\\MathPlot\\mathplot.ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Admin\\source\\repos\\MathPlot\\MathPlot\\mathplot.ui\\src\\components\\app\\header.vue?vue&type=template&id=08d48acb&","dependencies":[{"path":"C:\\Users\\Admin\\source\\repos\\MathPlot\\MathPlot\\mathplot.ui\\src\\components\\app\\header.vue","mtime":1638708962522},{"path":"C:\\Users\\Admin\\source\\repos\\MathPlot\\MathPlot\\mathplot.ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Admin\\source\\repos\\MathPlot\\MathPlot\\mathplot.ui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Admin\\source\\repos\\MathPlot\\MathPlot\\mathplot.ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Admin\\source\\repos\\MathPlot\\MathPlot\\mathplot.ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}